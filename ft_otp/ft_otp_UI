#!/Users/fde-fede/goinfre/miniconda3/envs/42AI-fde-fede/bin/python3
import hashlib
import base64
import os
import sys
import re
import time
import tkinter as tk
from PIL import Image, ImageTk
import qrcode
from tkinter import messagebox
import pyotp
import hmac
import random

sys.tracebacklimit = 0

def encrypt_key(key):
    salt = os.urandom(16)
    key_bytes = key.encode('utf-8')
    key_hash = hashlib.sha256(salt + key_bytes).digest()
    return base64.b64encode(salt + key_hash).decode('utf-8')

def generate_password(master_key):
    current_time = int(time.time())
    time_window = 30
    time_steps = current_time // time_window
    counter_bytes = time_steps.to_bytes(8, byteorder='big')
    master_key_bytes = master_key.encode()
    print("Clave pyotp:", pyotp.TOTP(base64.b32encode(master_key.encode())).now())
    hmac_digest = hmac.new(master_key_bytes, counter_bytes, hashlib.sha1).digest()
    offset = hmac_digest[-1] & 0x0F
    otp_bytes = hmac_digest[offset:offset+4]
    otp_int = int.from_bytes(otp_bytes, byteorder='big') & 0x7FFFFFFF
    otp = str(otp_int % 1000000).zfill(6)
    return otp

def save_key_to_file(key, file_path):
    try:
        with open(file_path, 'w') as file:
            file.write(key)
        messagebox.showinfo('Success', f'Key was successfully saved in {file_path}.')
    except Exception as e:
        messagebox.showerror('Error', f'Error saving key to file: {e}')
        sys.exit(1)

def load_key_from_file(file_path):
    try:
        with open(file_path, 'r') as file:
            key = file.read()
            return key.strip()
    except FileNotFoundError:
        messagebox.showerror('Error', f'Error: Key file {file_path} not found.')
        sys.exit(1)
    except Exception as e:
        messagebox.showerror('Error', f'Error loading key from file: {e}')
        sys.exit(1)

def save_password():
    global password
    password = paswrd_entry.get()
    if password == '':
        messagebox.showerror('Error', 'Error: Password cannot be empty')
        return
    else:
        messagebox.showinfo("Success", "The password has been saved")
        paswrd.destroy()
        encrypted = encrypt_key(master_key_entry.get())
        save_key_to_file(encrypted, 'ft_otp.key')
        return

def generate_master_key():
    hexadecimal = ""
    caracteres_hex = "0123456789abcdef"
    for i in range(64):
        hexadecimal += random.choice(caracteres_hex)
    master_key_entry.insert(0, hexadecimal)

def generate_password_handler():
    master_key = master_key_entry.get()
    if len(master_key) < 64 or not re.match("^[0-9a-fA-F]+$", master_key):
        messagebox.showerror('Error', 'Master key must be 64 char length hexadecimal.')
    else:
        global paswrd
        paswrd = tk.Tk()
        paswrd.eval('tk::PlaceWindow . center')
        paswrd.title("Password")
        paswrd_text = tk.Label(paswrd, text='Please, introduce password for ft_otp.key:')
        paswrd_text.pack()

        global paswrd_entry
        paswrd_entry = tk.Entry(paswrd, show='*')
        paswrd_entry.pack()

        paswrd_button = tk.Button(paswrd, text='Save password', command=save_password)
        paswrd_button.pack()

def generate_otp_handler():
    master_key = master_key_entry.get()
    key_file = key_file_entry.get()
    if master_key != '' and key_file != '':
        valid = 1
    else:
        valid = 0
    if valid:
        if os.path.exists('./ft_otp.key'):
            if password_file_entry.get() == password and key_file_entry.get() == 'ft_otp.key':
                encrypted_key = load_key_from_file(key_file)
                contrasena = generate_password(encrypted_key)
                otp_label.config(text=f'One-Time Password: {contrasena}')
                generate_qr(master_key)
            else:
                messagebox.showerror('Error', 'Error: Password and key file do not match')
        else:
            messagebox.showerror('Error', 'Error: Key file does not exist')
    else:
        messagebox.showerror('Error', 'Master key or key file cannot be empty')

def generate_qr(master_key):
    qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
    bytes_key = bytes.fromhex(master_key)
    base32_key = base64.b32encode(bytes_key).decode('utf-8')
    qr.add_data("otpauth://totp/ft_totp?secret="+base32_key)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    img = img.convert("RGB")
    img_filename = "otp_qrcode.png"
    img.save(img_filename)
    img_tk = Image.open(img_filename)
    img_tk = ImageTk.PhotoImage(img_tk)
    qr_label.config(image=img_tk)
    qr_label.image = img_tk

root = tk.Tk()
root.eval('tk::PlaceWindow . center')
root.title('ft_otp Generator')

master_key_label = tk.Label(root, text='Master Key:')
master_key_label.pack()
global master_key_entry
master_key_entry = tk.Entry(root, show='*')
master_key_entry.pack()

generate_button = tk.Button(root, text='Generate random key', command=generate_master_key)
generate_button.pack()

generate_button = tk.Button(root, text='Generate file', command=generate_password_handler)
generate_button.pack()

key_file_label = tk.Label(root, text='Key File:')
key_file_label.pack()
key_file_entry = tk.Entry(root)
key_file_entry.pack()

password_file_label = tk.Label(root, text='Password')
password_file_label.pack()
password_file_entry = tk.Entry(root, show='*')
password_file_entry.pack()

generate_otp_button = tk.Button(root, text='Generate OTP', command=generate_otp_handler)
generate_otp_button.pack()

otp_label = tk.Label(root, text='')
otp_label.pack()

qr_label = tk.Label(root)
qr_label.pack()

root.mainloop()
